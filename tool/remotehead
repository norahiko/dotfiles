#!/usr/bin/env python
"""
remotehead.py
-------------

Remote web browser reloader

copyright norahiko
license MIT

usage:
    # start remotehead server
    $ remotehead start chrome &

    # reload browser
    $ remotehead reload

    # go to URL
    $ remotehead go "http://www.google.com"

    # restart browser
    $ remotehead restart

    # quit server and browser
    $ remotehead quit
"""

default_host = "localhost"
default_port = 22564

import sys
import os
import urllib2

try:
    from xmlrpc.client import ServerProxy
except ImportError:
    from xmlrpclib import ServerProxy


class UnsupportedBrowser(Exception):
    pass


class UnsupportedPlatform(Exception):
    pass


class FirefoxDir(object):
    def __init__(self, base):
        self.base = base

    def __get__(self, obj, type):
        """ find Firefox profile directory """
        items = os.listdir(self.base)

        for item in items:
            if item.endswith(".default"):
                return os.path.join(self.base, item)

        for item in items:
            extdir = os.path.join(self.base, item, "extensions")
            if os.path.isdir(extdir):
                return os.path.join(self.base, item)


class ProfileDir(object):
    import getpass
    from os.path import expanduser

    username = getpass.getuser()

    linux_chrome  = expanduser("~/.config/google-chrome")
    mac_chrome    = expanduser("~/Library/Application Support/Google/Chrome")
    win_chrome    = r"C:\Users\%s\AppData\Local\Google\Chrome\User Data" % username
    winxp_chrome  = r"C:\Documents and Settings\%s\Local Settings\Application Data\Google\Chrome\User Data" % username

    linux_firefox = FirefoxDir(expanduser("~/.mozilla/firefox"))
    mac_firefox   = FirefoxDir(expanduser("~/Library/Application Support/Firefox/Profiles"))
    win_firefox   = FirefoxDir(r"C:\Users\%s\AppData\Roaming\Mozilla\Firefox\Profiles" % username)
    winxp_firefox = FirefoxDir(r"C:\Documents and Settings\%s\Application Data\Mozilla\Firefox\Profiles" % username)


def get_profile_dir(browser):
    platform = get_platform()
    attr = "%s_%s" %(platform, browser)
    return getattr(ProfileDir(), attr, None)


def get_platform():
    import platform
    p = sys.platform
    if p.startswith("linux"):
        return "linux"
    elif p == "darwin":
        return "mac"
    elif p.startswith("win") or p == "cygwin":
        major_version = int(platform.version()[0])
        if major_version == 5:
            return "winxp"
        elif 5 < major_version:
            return "win"

    raise UnsupportedPlatform(p)


def start_browser(browser, profile_dir):
    if browser == "chrome":
        return start_chrome(profile_dir)
    elif browser == "firefox":
        return start_firefox(profile_dir)
    else:
        raise UnsupportedBrowser(browser)


def start_firefox(profile_dir):
    from selenium import webdriver
    profile = webdriver.FirefoxProfile(profile_dir)
    return webdriver.Firefox(profile)


def start_chrome(profile_dir):
    from selenium import webdriver
    opt = webdriver.ChromeOptions()

    if profile_dir:
        opt.arguments.append("--user-data-dir=" + profile_dir)
    return webdriver.Chrome(chrome_options=opt)


class RemoteHeadAPI(object):
    def __init__(self, browser, use_profile):
        self.running = True
        self.__browser = browser
        self.__profile_dir = get_profile_dir(browser) if use_profile else None

        if self.__profile_dir is not None and not os.path.isdir(self.__profile_dir):
            self._profile_dir = None

        self.__start()

    def __start(self):
        self.__driver = start_browser(self.__browser, self.__profile_dir)


    def quit_webdriver(self):
        try:
            self.__driver.quit()
        except urllib2.URLError:
            pass
    # API
    def go(self, url):
        self.__driver.get(url)
        return 0 # XMLRPC api must be return value

    # API
    def reload(self):
        self.__driver.refresh()
        return 0

    # API
    def restart(self):
        self.quit_webdriver()
        self.__start()
        return 0

    # API
    def quit(self):
        self.running = False
        return 0


def start(arg):
    import threading
    try:
        from xmlrpc.server import SimpleXMLRPCServer
    except ImportError:
        from SimpleXMLRPCServer import SimpleXMLRPCServer

    remote_head = RemoteHeadAPI(arg.browser, arg.use_profile)

    server = SimpleXMLRPCServer((arg.host, arg.port), logRequests=False)
    server.register_instance(remote_head)

    server_thread = threading.Thread(target=server.serve_forever)
    server_thread.daemon = True
    server_thread.start()

    try:
        while remote_head.running:
            server_thread.join(0.5)
    finally:
        remote_head.quit_webdriver()
        server.shutdown()


def main():
    import argparse
    parser = argparse.ArgumentParser("remotehead")
    parser.add_argument("--port", type=int, default=default_port, metavar=str(default_port))
    parser.add_argument("--host", default=default_host, metavar=default_host)

    sub_parser = parser.add_subparsers(dest="command")
    start_command = sub_parser.add_parser("start", help="start server")
    start_command.add_argument("browser", default="chrome", choices=("chrome", "firefox"))
    start_command.add_argument("--use-profile", action="store_true")
    sub_parser.add_parser("go", help="go to URL").add_argument("url")
    sub_parser.add_parser("restart", help="restart browser")
    sub_parser.add_parser("reload", help="reload browser")
    sub_parser.add_parser("quit", help="quit server")

    arg = parser.parse_args()
    client = ServerProxy("http://%s:%s" %(arg.host, arg.port))

    if arg.command == "start":
        start(arg)

    elif arg.command == "go":
        client.go(arg.url)

    elif arg.command == "reload":
        client.reload()

    elif arg.command == "restart":
        client.restart()

    elif arg.command == "quit":
        client.quit()

    else:
        parser.print_help()


if __name__ == '__main__':
    main()

