# Console.log
snippet bench
	var start = Date.now();

	console.log(Date.now() - start, "[ms]");
snippet assertions
	var chai       = global.chai || require("chai");
	var equal      = chai.assert.deepEqual;
	var notEqual   = chai.assert.notDeepEqual;
	var instanceOf = chai.assert.instanceOf;
	var ok         = chai.assert.ok;

snippet wraps
	(function(global) {
	"use strict";
	${1}
	})(this.self || global);

snippet time
	setTimeout(function() {
		${1}
	}, 100);

snippet inter
	setInterval(function() {
		${1}
	}, 100);



snippet bc
	// ----------------------------------------
	// ${1}
snippet l
	console.log(${1});
snippet j
	console.log(JSON.stringify(${1}, null, 2));
snippet u
	undefined${1}
snippet a
	assert.${1}
snippet des
	describe("${1}", function() {
		${2}
	});
snippet it
	it("${1}", function() {
		${2}
	});
snippet ok
	assert.ok(${1})
snippet r
	refute(${1});
snippet eq
	equal(
		${1},
		${2}
	);
snippet ne
	notEqual(
		${1},
		${2}
	);

# Main
snippet ifmain
	if(!module.parent) {
		${1}
	}
# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function(${1}) {${2}};
# if
snippet if
	if (${1:true}) {${2}};
# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}};
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
snippet fori
	for(var i = 0; i < ${1:1000000}; i++) {
		${2}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
