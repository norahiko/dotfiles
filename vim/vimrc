"/* vim: set foldmethod=marker : */
" =======================================================================
" Bundles
" =======================================================================

" runtimepath {{{
if has('vim_starting')
    set nocompatible
    exe 'set runtimepath+='.globpath($GOPATH, 'src/github.com/nsf/gocode/vim')
    filetype off
    set runtimepath+=~/.vim/neobundle.vim
    call neobundle#rc(expand('~/.vim/bundle/'))
endif
" }}}

" Bundle {{{
" file
NeoBundle 'unite.vim'
NeoBundle 'scrooloose/nerdtree'
"日本語ドキュメント
NeoBundle 'vim-jp/vimdoc-ja'
" git plugin
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'mattn/gist-vim'
NeoBundle 'mattn/webapi-vim'
" run
NeoBundle 'Shougo/vimproc', {'build': {'unix': 'make -f make_unix.mak'}}
" quickrun
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'osyo-manga/shabadou.vim'
NeoBundle 'osyo-manga/vim-watchdogs'
" command output to buffer
NeoBundle 'tyru/capture.vim'
NeoBundle 'thinca/vim-prettyprint'

" comment utility
NeoBundle 'scrooloose/nerdcommenter'
" zen coding
NeoBundleLazy 'mattn/emmet-vim', {'autoload': {'filetypes': 'html'}}
" code completion
NeoBundle 'Shougo/neocomplete.vim'
" snippet
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
" show source outline
NeoBundle 'Shougo/unite-outline'
NeoBundle 'junegunn/vim-easy-align'
" operator
NeoBundle 'operator-user'
NeoBundle 'tyru/operator-camelize.vim'
NeoBundleLazy 'tyru/operator-html-escape.vim', {'autoload': {'filetypes': 'html'}}

" lang
NeoBundleLazy 'klen/python-mode'            , {'autoload': {'filetypes': 'python'}}
NeoBundleLazy 'othree/html5.vim'            , {'autoload': {'filetypes': 'html'}}
NeoBundleLazy 'leafgarland/typescript-vim'  , {'autoload': {'filetypes': 'typescript'}}
NeoBundleLazy 'clausreinke/typescript-tools', {'autoload': {'filetypes': 'typescript'}}
NeoBundleLazy 'tpope/vim-markdown'          , {'autoload': {'filetypes': 'markdown'}}
NeoBundleLazy 'dag/vim2hs'                  , {'autoload': {'filetypes': 'haskell'}}
NeoBundleLazy 'ujihisa/neco-ghc'            , {'autoload': {'filetypes': 'haskell'}}
NeoBundleLazy 'eagletmt/ghcmod-vim'         , {'autoload': {'filetypes': 'haskell'}}
NeoBundleLazy 'wavded/vim-stylus'           , {'autoload': {'filetypes': 'stylus'}}
NeoBundleLazy 'jdonaldson/vaxe'             , {'autoload': {'filetypes': ['haxe', 'hxml']}}

"JavaScript
NeoBundleLazy 'pangloss/vim-javascript', {'autoload': {'filetypes': 'javascript'}}
NeoBundleLazy 'norahiko/tern_for_vim', {
            \ 'build' : {
            \   'unix': 'npm install',
            \ },
            \ 'autoload' : {
            \   'filetypes' : 'javascript'
            \ }}

" Jade
NeoBundleLazy 'digitaltoad/vim-jade', {'autoload': {'filetypes': 'jade'}}
" Golang
NeoBundleLazy 'norahiko/vim-golang', {'autoload': {'filetypes': 'go'}}

" style
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'jacquesbh/vim-showmarks'
NeoBundle 'quickhl.vim'
NeoBundle 'cohama/vim-hier'
" }}}

" =======================================================================
" Vim組み込みの設定
" =======================================================================

augroup config
    au!
    autocmd QuickFixCmdPost *grep* cwindow
    autocmd ColorScheme * highlight CursorLine ctermbg=235
    autocmd FileType help set number

    " 前回のカーソル位置を復元する
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif

    " オムニ補完関数
    autocmd Filetype javascript call tern#Enable()
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=tern#Complete
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
augroup END


colorscheme jellybeans
set guifont=Bitstream_Vera_Sans_Mono_11
filetype plugin indent on

" キーボードショートカット{{{
let mapleader = ","

noremap <silent> <C-T> :tabnew<CR>
imap <c-t> <Nop>

noremap <silent> <F5> :e %<CR>

noremap <silent> <C-S> :w<CR>
inoremap <silent> <C-S> <ESC>:w<CR>

" 行末の空白を削除
noremap <Leader>s :%s/\s\+$//<CR>

" よく打ち間違えるため
noremap K k
noremap ; :

" ハイライトを非表示
noremap <Leader>n :nohl<CR>

" 常に拡張正規表現を使う
nnoremap / /\v
cnoremap %s/ %s/\v

" ctags
noremap <C-]> g<C-]>
noremap <C-p> :pop<CR>
noremap go g'
set tags=./tags,../tags,$HOME/.tags

" スクロール
inoremap <C-d> <ESC><C-d>
inoremap <C-u> <ESC><C-u>

"Jumplistのキーを入れ替える
noremap <c-o> <c-i>
noremap <c-i> <c-o>

" 検索箇所を真ん中に
noremap * *zz
noremap # #zz
noremap g* g*zz
noremap g# g#zz

" vimdiffに関する設定
if &diff
    map <leader>1 :diffget LOCAL<CR>
    map <leader>2 :diffget BASE<CR>
    map <leader>3 :diffget REMOTE<CR>
endif

" コマンドラインモード
"
cnoremap <C-a> <Home>
" 一文字戻る
cnoremap <C-b> <Left>
" カーソルの下の文字を削除
cnoremap <C-d> <Del>
" 行末へ移動
cnoremap <C-e> <End>
" 一文字進む
cnoremap <C-f> <Right>
" コマンドライン履歴を一つ進む
cnoremap <C-n> <Down>
" コマンドライン履歴を一つ戻る
cnoremap <C-p> <Up>
" 前の単語へ移動
cnoremap <M-b> <S-Left>
" 次の単語へ移動
cnoremap <M-f> <S-Right>


"operator
nmap <Leader>u <Plug>(operator-camelize)
nmap <Leader>U <Plug>(operator-decamelize)

nmap <Leader>h <Plug>(quickhl-manual-this)
xmap <Leader>h <Plug>(quickhl-manual-this)

nmap <Leader>e <Plug>(operator-html-escape)
nmap <Leader>E <Plug>(operator-html-unescape)
nmap <silent> <Leader>j :ErrorAtCursor<CR>
" }}}

" 編集に関する設定 {{{

" インクリメンタル検索
set incsearch
" 検索にマッチしたすべてのテキストをハイライト
set hlsearch
" 検索時に大文字小文字を無視 (noignorecase:無視しない)
set ignorecase
" 大文字小文字の両方が含まれている場合は大文字小文字を区別
set smartcase
" 検索時にファイルの最後まで行ったら最初に戻る (nowrapscan:戻らない)
set wrapscan
" コマンド、検索パターンを100個まで履歴に残す
set history=100

set showtabline=1

" ツールバーを削除
set guioptions-=T
" ファイルが更新されていたらバッファを再読込する
set autoread

"
" 改行コードの自動認識
set fileformats=unix,dos,mac
" バックスペースでインデントや改行を削除できるようにする
set backspace=indent,eol,start
" 括弧入力時に対応する括弧を表示 (noshowmatch:表示しない)
set showmatch
" 対応する括弧の表示時間を2にする
set matchtime=2
" コマンドライン補完するときに強化されたものを使う
set wildmenu
" テキスト挿入中の自動折り返しを日本語に対応させる
set formatoptions+=mM

set autochdir

" ドキュメントの日本語化ファル
helptags ~/work/dotfiles/vim/bundle/vimdoc-ja/doc

" インデント
"
" 自動的にインデントする (noautoindent:インデントしない)
set autoindent
" タブが対応する空白の数
set tabstop=4
" タブやバックスペースの使用等の編集操作をするときに、タブが対応する空白の数
set softtabstop=4
" インデントの各段階に使われる空白の数
set shiftwidth=4
" タブをスペースに展開しない (expandtab:展開する)
set expandtab

" GUI固有ではない画面表示の設定
"

" 行番号を表示
set number

" カーソル行をハイライト
set cursorline


" 折り返しを禁止
set nowrap
" 常にステータス行を表示 (詳細は:he laststatus)
set laststatus=2
" コマンドラインの高さ (Windows用gvim使用時はgvimrcを編集すること)
set cmdheight=1
" コマンドをステータス行に表示
set showcmd
" タイトルを表示
set title
" シンタックスハイライトを有効にする
syntax on
" 入力されているテキストの最大幅
" (行がそれより長くなると、この幅を超えないように空白の後で改行される)を無効にする
set textwidth=0

" ウィンドウを自動でリサイズしない
set noequalalways

" 全角スペースの表示
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=red
highlight CursorIM guifg=NONE guibg=Purple
match ZenkakuSpace /　/
set conceallevel=0 concealcursor=i

" 空白文字を表示する
set list
set listchars=tab:>\ ,trail:-,extends:<,precedes:<
"highlight SpecialKey ctermbg=none ctermfg=darkgray
highlight SpecialKey term=underline ctermbg=none ctermfg=darkgray

" バッファを切替えてもundoの効力を失わない
set hidden
" 起動時のメッセージを表示しない
set shortmess+=I

" スワップファイルを作成しない
set noswapfile
" バックアップファイルを作成しない
set nobackup

"クリップボードに関する設定:
set clipboard=unnamedplus


"自動折りたたみ設定
set foldmethod=indent
set foldlevel=1
set nofoldenable
let g:tern_show_argument_hints = 'on_hold'
set updatetime=600


" }}}
" =======================================================================
" プラグインの設定
" =======================================================================

augroup plugin
    " unite.vim keybind
    autocmd FileType unite nmap <buffer> <ESC><ESC> :<C-u>q<CR>
    autocmd FileType unite imap <buffer> <ESC><ESC> <ESC>:<C-u>q<CR>


    " 起動時にファイルが開いていなければNERDTreeを開く
    autocmd VimEnter * if !argc() | NERDTree | endif
    " 他のバッファをすべて閉じた時にNERDTreeが開いていたらNERDTreeも一緒に閉じる。
    autocmd BufEnter * if (winnr('$') == 1 && exists('b:NERDTreeType') && b:NERDTreeType == 'primary') | q | endif

    " emmet keybind
    autocmd FileType html imap <buffer><silent> <c-e> :call emmet#expandAbbr(3,"")<CR>

    " TypeScript jump keybind
    autocmd Filetype typescript noremap <buffer><silent> <C-]> :TSSdef<CR>

    " JavaScript jump keybind
    autocmd Filetype javascript noremap <buffer><silent> <C-]> :TernDef<CR>

    autocmd FileType go setlocal noexpandtab
    autocmd FileType go compiler go

    autocmd FileType haxe hi link StorageClass Statement
    autocmd FileType haxe setlocal autowrite
    autocmd FileType haxe call g:find_xhml()
augroup END

" fugitive {{{
command! Gs Gstatus
command! Gd Gdiff
" }}}

" lightline.vim {{{
let g:lightline = {
            \ 'colorscheme': 'wombat',
            \ 'active': {
            \   'left': [ [ 'mode', 'paste', 'fugitive', 'gitgutter' ], [ 'readonly', 'filename', 'modified' ] ],
            \   'right': [ [ 'lineinfo' ], [ 'percent' ], [ 'fileformat', 'fileencoding', 'filetype' ] ],
            \ },
            \ 'inactive': {
            \   'left':[ [ 'filename' ] ],
            \   'right': [ [ 'lineinfo' ], [ 'percent' ] ],
            \ },
            \ 'component_function': {
            \   'fugitive': 'FugitiveStatusLine',
            \   'gitgutter': 'GitGutterStatusLine',
            \ },
            \ 'separator': {'left': '⮀', 'right': '⮂'},
            \ 'subseparator': {'left': '⮁', 'right': '⮃'}
            \ }

function! FugitiveStatusLine()
    if exists("*fugitive#head")
        let head = fugitive#head()
        return strlen(head) ? '⭠ '.head : ''
    endif
    return ''
endf

function! GitGutterStatusLine()
    if strlen(fugitive#head()) == 0
        return ''
    endif
    if !exists('*GitGutterGetHunkSummary') || !get(g:, 'gitgutter_enabled', 0)
        return ''
    endif
    let hunks = GitGutterGetHunkSummary()
    let res = '✚ ' . hunks[0] . '  ➜ ' . hunks[1] . '  ✘ ' . hunks[2]
    return res
endf
" }}}

" show-marks {{{
noremap <Leader>m :DoShowMark<CR>
" }}}

" Git gutter {{{
let g:gitgutter_map_keys = 0
noremap <silent> <Leader>gg :GitGutterToggle<CR>
noremap <silent> <Leader>gh :GitGutterLineHighlightsToggle<CR>
noremap <silent> <Leader>gn :GitGutterNextHunk<CR>
noremap <silent> <Leader>gp :GitGutterPrevHunk<CR>
" }}}

" Unite.vim {{{
nnoremap <silent> <C-f> :<C-u>UniteWithBufferDir -buffer-name=files file file/new<CR>
inoremap <silent> <C-f> <ESC>:<C-u>UniteWithBufferDir -buffer-name=files file file/new<CR>
nnoremap <silent> <C-b> :<C-u>Unite file_mru<CR>
inoremap <silent> <C-b> <ESC>:<C-u>Unite file_mru<CR>
" }}}

" unite-outline {{{
map <Leader>o :Unite -vertical -winwidth=40 -no-quit outline<CR>
" }}}

" quickhl {{{
let g:quickhl_manual_colors = [
            \ 'gui=bold ctermfg=16  ctermbg=153 guifg=#ffffff guibg=#0a7383',
            \ 'gui=bold ctermfg=16   ctermbg=1   guibg=#a07040 guifg=#ffffff',
            \ 'gui=bold ctermfg=16   ctermbg=2   guibg=#4070a0 guifg=#ffffff',
            \ 'gui=bold ctermfg=16   ctermbg=3   guibg=#40a070 guifg=#ffffff',
            \ 'gui=bold ctermfg=16   ctermbg=5   guibg=#40a070 guifg=#ffffff',
            \ 'gui=bold ctermfg=16   ctermbg=6   guibg=#40a070 guifg=#ffffff',
            \ 'gui=bold ctermfg=16   ctermbg=7   guibg=#40a070 guifg=#ffffff',
            \ 'gui=bold ctermfg=16   ctermbg=8   guibg=#40a070 guifg=#ffffff',
            \ 'gui=bold ctermfg=16   ctermbg=9   guibg=#40a070 guifg=#ffffff',
            \ ]
" }}}

" Capture {{{
command! -nargs=1 PPP Capture PrettyPrint <args>
" }}}

" neocomplete {{{
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
let g:neocomplete#sources#dictionary#dictionaries = {
            \ 'default' : '',
            \ 'javascript' : $HOME. '/.javascript_completions',
            \ 'typescript' : $HOME. '/.typescript_completions',
            \ 'python' : $HOME. '/.python_completions',
            \ 'haxe' : $HOME. '/.haxe_completions',
            \ 'go' : $HOME. '/.go_completions',
            \ }

let g:neocomplete#keyword_patterns = {
            \ 'default': '\h\w*',
            \ 'typescript': '[^. \t]\.\w*',
            \ 'haxe': '\h\w*',
            \}

            "\ 'haxe': '[^. \t]\.\w*',
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()

inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endf
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" }}}

" neosnippet {{{
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

let g:neosnippet#enable_snipmate_compatibility = 1
let g:snippets_dir = '$HOME/.vim/snippets/'
" }}}

" NERDTree {{{
noremap <Leader>f :NERDTreeToggle<CR>
noremap <Leader>F :NERDTreeMirror<CR>
noremap <Leader><c-f> :NERDTreeFind<CR>

let g:NERDTreeShowBookmarks=1
let g:NERDTreeWinPos='left'
let g:NERDTreeWinSize=40
" }}}

" emmet {{{
let g:user_emmet_leader_key = '<c-0>'
" }}}

" Python Mode {{{
let g:pymode_lint_checker = 'pyflakes'
"自動的に上画面にドキュメントが表示されるのを停止する
set completeopt-=preview
let g:pymode_rope_global_prefix = '<Leader>p'
" }}}

" Align {{{
vmap <Enter> <Plug>(EasyAlign)
" }}}

" Quickrun {{{
let g:quickrun_config = {
            \ '_' : {
            \   'outputter/buffer/split' : ':botright 6sp',
            \   'runner' : 'vimproc',
            \   'runner/vimproc/updatetime' : 100,
            \ },
            \ 'javascript': {
            \   'type': 'javascript/nodejs'
            \ },
            \ 'jade': {
            \   'command': 'jade',
            \   'exec': 'jade %s -P'
            \ },
            \ 'coffee': {
            \   'command': 'coffee',
            \   'exec': ['%c -cp %s'],
            \   'output_filetype': 'javascript',
            \   'tempfile'  : '%{tempname()}.js',
            \ },
            \ 'go': {
            \   'exec': '%c run %s:p %a',
            \   'hook/cd/directory': '',
            \ },
            \ 'runcoffee': {
            \   'command': 'coffee',
            \   'exec': ['%c %s'],
            \ },
            \ 'typescript': {
            \   'cmdopt': '--noImplicitAny',
            \ },
            \ 'stylus': {
            \   'cmdopt': '--print'
            \ },
            \ 'haxe': {
            \   'exec': '%c -x %s:t',
            \ },
            \ "watchdogs_checker/_" : {
            \   'outputter/quickfix/open_cmd' : 'cwindow',
            \ },
            \ 'watchdogs_checker/haxe-project': {
            \   'exec': 'haxe build.hxml --no-output',
            \   'errorformat': "%f:%l: characters %n-%c : %m,%f:%l: lines %m,%m",
            \   'hook/cd/directory': '%{fnamemodify(b:vaxe_hxml, ":h")}',
            \ },
            \ 'watchdogs_checker/haxe': {
            \   'exec': 'haxe %s:t --no-output ',
            \   'errorformat': "%f:%l: characters %n-%c : %m,%f:%l: lines %m,%m",
            \ },
            \ 'haxe/watchdogs_checker': {
            \   'type': '',
            \ },
            \}

" quickrunを停止する
command! Stop call quickrun#sweep_sessions()
" }}}

" vim-watchdogs {{{
call watchdogs#setup(g:quickrun_config)
let g:watchdogs_check_BufWritePost_enable = 1
let g:watchdogs_check_BufWritePost_enables = {
            \ 'typescript' : 0,
            \}
noremap <Leader>w :WatchdogsRun<CR>
" }}}

" vim-hier {{{
highlight hier_error ctermbg=237
let g:hier_highlight_group_qf = 'hier_error'
" }}}


" TypeScript {{{
" }}}

" Tern js {{{
"}}}

" golang {{{
let g:go_highlight_chan_whitespace_error = 0

function! s:go_config()
endf

let g:gofmt_command = 'goimports'
" }}}

" Haxe {{{
let g:hxml_name = 'build.hxml'

function! g:find_xhml()
    let cwd = expand('%:p:h')
    let sep = fnamemodify('.', ':p')[-1:]
    let path = cwd
    let parent = fnamemodify(path, ':h')
    while path != parent
        if filereadable(path . sep . g:hxml_name)
            let b:vaxe_hxml = path . sep . g:hxml_name
            let g:quickrun_config['haxe/watchdogs_checker']['type'] = 'watchdogs_checker/haxe-project'
            return
        endif
        let path = parent
        let parent = fnamemodify(parent, ':h')
    endwhile
    let b:vaxe_hxml = cwd . sep . g:hxml_name
    let g:quickrun_config['haxe/watchdogs_checker']['type'] = 'watchdogs_checker/haxe'
endf

" }}}
